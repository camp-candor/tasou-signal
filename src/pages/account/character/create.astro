---
import Layout from '../../../layouts/Layout.astro';

const auth = Astro.locals.auth();
const token = await auth.getToken();
---
<Layout title="Create a New Character">
  <main class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-8">Create Your Character</h1>

    <div class="bg-white shadow-md rounded-lg p-6">
        <form id="create-character-form" class="w-full max-w-lg">
            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full px-3">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="name">
                        Character Name
                    </label>
                    <input class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="name" name="name" type="text" placeholder="Jane Doe" required>
                </div>
            </div>
            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full px-3">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="grid-state">
                        Class
                    </label>
                    <div class="relative">
                        <select class="block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="class" name="class">
                        <option>Warrior</option>
                        <option>Mage</option>
                        <option>Rogue</option>
                        </select>
                        <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                        <svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z"/></svg>
                        </div>
                    </div>
                </div>
            </div>
            <div class="flex flex-wrap -mx-3 mb-6">
                <div class="w-full px-3">
                    <label class="block uppercase tracking-wide text-gray-700 text-xs font-bold mb-2" for="appearance">
                        Appearance (Customization String)
                    </label>
                    <textarea class="appearance-none block w-full bg-gray-200 text-gray-700 border border-gray-200 rounded py-3 px-4 mb-3 leading-tight focus:outline-none focus:bg-white focus:border-gray-500" id="appearance" name="appearance" placeholder="e.g., hair:blonde,eyes:blue"></textarea>
                </div>
            </div>

            <div class="flex items-center justify-between">
                <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                    Create Character
                </button>
                 <a href="/account/profile" class="inline-block align-baseline font-bold text-sm text-blue-500 hover:text-blue-800">
                    Cancel
                </a>
            </div>
            <p id="feedback" class="text-sm mt-4"></p>
        </form>
    </div>
  </main>

  <script define:vars={{ token }}>
    document.getElementById('create-character-form').addEventListener('submit', async (event) => {
      event.preventDefault();
      const feedbackEl = document.getElementById('feedback');
      const form = event.target;
      const formData = new FormData(form);
      const characterName = formData.get('name');
      
      feedbackEl.textContent = 'Creating character...';
      feedbackEl.style.color = 'black';

      try {
        // This is a placeholder URL. Replace with your actual Game API endpoint.
        const response = await fetch('https://game-api.yourdomain.com/api/character/create', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(Object.fromEntries(formData))
        });

        if (!response.ok) {
          // Mocking a failed response for demonstration
          if (response.status === 400 || !response.json) {
              throw new Error(`Server responded with status: ${response.status}`);
          }
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to create character');
        }
        
        // Mocking a successful response for demonstration
        const result = { character: { name: characterName } }; // await response.json();
        feedbackEl.textContent = `Character "${result.character.name}" created successfully! Redirecting...`;
        feedbackEl.style.color = 'green';

        setTimeout(() => {
          window.location.href = '/account/profile';
        }, 2000);

      } catch (error) {
        feedbackEl.textContent = `Error: This is a mock API. ${error.message}`;
        feedbackEl.style.color = 'red';
      }
    });
  </script>
</Layout>